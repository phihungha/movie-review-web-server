// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  birthDate DateTime
  type      UserType

  reviews      Review[] @relation(name: "review-author")
  reviewLikes  Review[] @relation(name: "review-likes")
  viewedMovies Movie[]
}

enum UserType {
  Regular
  Critic
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String
  movies Movie[]
}

model Company {
  id                Int     @id @default(autoincrement())
  name              String
  producedMovies    Movie[] @relation(name: "production-company")
  distributedMovies Movie[] @relation(name: "distribution-company")
}

model CrewMember {
  id             Int            @id @default(autoincrement())
  name           String
  directedMovies Movie[]        @relation(name: "director")
  writtenMovies  Movie[]        @relation(name: "writer")
  dopMovies      Movie[]        @relation(name: "dop")
  scoredMovies   Movie[]        @relation(name: "composer")
  editedMovies   Movie[]        @relation(name: "editor")
  actedMovies    ActingCredit[]
}

model ActingCredit {
  crew          CrewMember @relation(fields: [crewId], references: [id])
  crewId        Int
  movie         Movie      @relation(fields: [movieId], references: [id])
  movieId       Int
  characterName String

  @@id([crewId, movieId])
}

model Movie {
  id                    Int       @id @default(autoincrement())
  title                 String
  releaseDate           DateTime
  genres                Genre[]
  productionCompanies   Company[] @relation(name: "production-company")
  distributionCompanies Company[] @relation(name: "distribution-company")

  directors CrewMember[]   @relation(name: "director")
  writers   CrewMember[]   @relation(name: "writer")
  dops      CrewMember[]   @relation(name: "dop")
  editors   CrewMember[]   @relation(name: "editor")
  composers CrewMember[]   @relation(name: "composer")
  actors    ActingCredit[]

  reviews           Review[]
  reviewCount       Int
  userScore         Float
  userReviewCount   Int
  criticScore       Float
  criticReviewCount Int
  viewedUsers       User[]
}

model Review {
  id       Int   @id @default(autoincrement())
  author   User  @relation(name: "review-author", fields: [authorId], references: [id])
  authorId Int
  movie    Movie @relation(fields: [movieId], references: [id])
  movieId  Int

  postTime DateTime @default(now())
  score    Int
  content  String

  likeUsers    User[] @relation(name: "review-likes")
  likeCount    Int
  commentCount Int
}
